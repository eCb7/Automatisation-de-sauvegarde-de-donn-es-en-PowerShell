# Charger la biblioth√®que .NET Windows Forms pour cr√©er une interface graphique
Add-Type -AssemblyName System.Windows.Forms

# D√©finition d'une fonction pour ouvrir une bo√Æte de dialogue de s√©lection de dossier
function Select-FolderDialog {
    # Activer les styles visuels Windows
    [System.Windows.Forms.Application]::EnableVisualStyles()
    
    # Cr√©er une nouvelle instance du s√©lecteur de dossier
    $folderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog

    # Afficher la bo√Æte de dialogue et r√©cup√©rer le chemin s√©lectionn√©
    if ($folderBrowser.ShowDialog() -eq "OK") {
        return $folderBrowser.SelectedPath
    }
    else {
        # Si aucun dossier n'est s√©lectionn√©, afficher un message et arr√™ter le script
        Write-Host "Aucun dossier s√©lectionn√©. Script annul√©." -ForegroundColor Red
        exit
    }
}

# Demande √† l'utilisateur de choisir le dossier source √† sauvegarder
Write-Host "S√©lectionnez le dossier SOURCE √† sauvegarder..." -ForegroundColor Cyan
$source = Select-FolderDialog

# Demande √† l'utilisateur de choisir le dossier de destination pour stocker les sauvegardes
Write-Host "S√©lectionnez le dossier DESTINATION o√π stocker les sauvegardes..." -ForegroundColor Cyan
$destinationRoot = Select-FolderDialog

# D√©finir la dur√©e de r√©tention des fichiers de sauvegarde (en jours)
$retentionDays = 7  # supprimer les sauvegardes plus vieilles que 7 jours

# G√©n√©rer une date/heure actuelle pour nommer le dossier temporaire de sauvegarde
$date = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"

# Cr√©er un chemin pour le dossier temporaire de sauvegarde
$tempBackupFolder = Join-Path -Path $destinationRoot -ChildPath "Backup_$date"

# Cr√©er le dossier temporaire
New-Item -ItemType Directory -Path $tempBackupFolder -Force | Out-Null

# Copier tous les fichiers du dossier source dans le dossier temporaire (avec sous-dossiers)
Copy-Item -Path "$source\*" -Destination $tempBackupFolder -Recurse -Force

# D√©finir le chemin du fichier ZIP final
$zipPath = Join-Path -Path $destinationRoot -ChildPath "Backup_$date.zip"

# Compresser le dossier temporaire dans un fichier .zip
Compress-Archive -Path "$tempBackupFolder\*" -DestinationPath $zipPath

# Supprimer le dossier temporaire apr√®s compression
Remove-Item -Path $tempBackupFolder -Recurse -Force

# Supprimer les anciennes sauvegardes (fichiers .zip) plus anciennes que la dur√©e de r√©tention
Get-ChildItem -Path $destinationRoot -Filter "*.zip" | Where-Object {
    ($_.LastWriteTime -lt (Get-Date).AddDays(-$retentionDays))
} | Remove-Item -Force

# Configuration de l'envoi de mail via SMTP (Office 365 dans cet exemple)
$smtpServer = "smtp.office365.com"         # Adresse du serveur SMTP
$smtpPort = 587                            # Port SMTP (587 = STARTTLS)
$smtpUser = "tonemail@example.com"         # Identifiant de l'exp√©diteur (adresse email)
$smtpPassword = "TonMotDePasse"            # Mot de passe du compte
$to = "destinataire@example.com"           # Destinataire du mail
$subject = "Sauvegarde termin√©e avec succ√®s"  # Sujet du message
$body = "La sauvegarde du dossier $source a √©t√© r√©alis√©e avec succ√®s √† $date.`nFichier sauvegard√© : $zipPath"

# Cr√©ation de l'objet email
$mailMessage = New-Object system.net.mail.mailmessage
$mailMessage.from = $smtpUser
$mailMessage.To.add($to)
$mailMessage.Subject = $subject
$mailMessage.Body = $body

# Cr√©ation de l'objet SMTP et d√©finition des param√®tres de connexion
$smtp = New-Object Net.Mail.SmtpClient($smtpServer, $smtpPort)
$smtp.EnableSsl = $true
$smtp.Credentials = New-Object System.Net.NetworkCredential($smtpUser, $smtpPassword)

# Tentative d'envoi de l'email
try {
    $smtp.Send($mailMessage)
    Write-Host "Email envoy√© avec succ√®s." -ForegroundColor Green
}
catch {
    # En cas d'erreur d'envoi, afficher le message d'erreur
    Write-Host "Erreur lors de l'envoi de l'email : $_" -ForegroundColor Red
}

# Message final de confirmation de fin de sauvegarde
Write-Host "Sauvegarde termin√©e et compress√©e sous : $zipPath" -ForegroundColor Green
# FIN

###################################################################
# üóÇÔ∏è L√âGENDE DES √âL√âMENTS DU SCRIPT POWERHELL
#
# #                         ‚Üí commentaire, non ex√©cut√©
# $nomVariable              ‚Üí une variable stockant des donn√©es (ex : chemins, texte, date)
# "texte $variable"         ‚Üí texte avec insertion dynamique de variable
# Write-Host                ‚Üí affiche du texte dans la console (optionnel : couleur)
# function ... { }          ‚Üí d√©finition d'une fonction r√©utilisable
# New-Object                ‚Üí cr√©e un nouvel objet .NET (GUI, email, etc.)
# Join-Path                 ‚Üí construit un chemin de fichier fiable
# Get-Date                  ‚Üí r√©cup√®re la date/heure actuelle
# Copy-Item                 ‚Üí copie fichiers/dossiers
# Compress-Archive          ‚Üí cr√©e un fichier .zip
# Remove-Item               ‚Üí supprime fichiers/dossiers
# Get-ChildItem             ‚Üí liste les fichiers d‚Äôun dossier
# Where-Object { condition }‚Üí filtre des √©l√©ments selon une r√®gle
# Try { } Catch { }         ‚Üí bloc de gestion d‚Äôerreurs
# -Recurse                  ‚Üí inclut les sous-dossiers
# -Force                    ‚Üí force une action m√™me si bloqu√©e
# -ForegroundColor          ‚Üí couleur du texte affich√©
# .Add(...)                 ‚Üí ajoute un √©l√©ment √† une liste (ex : destinataires d‚Äôemail)
###################################################################
